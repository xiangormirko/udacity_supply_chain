// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 2
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('1', "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0xd3a4b888d8854800ac091ef61dbfe971ab0bbec8
    ///(1) 0xe859f59c83839e2d0ff1d3087684f3836b2f5485
    ///(2) 0x99c3cdf09dde998204c9d53b34b903fff34e9773
    ///(3) 0xc713426537a4a71b9ff762eef14e11a260c01787
    ///(4) 0x13753c9a6c5f3a74d00ed94882cb12c65dcd4e70
    ///(5) 0x2aa1274cbc8c0a5f65b4685d9e56c8859001bf4d
    ///(6) 0x6694f990a782d960093fcfad8beca3758ffebabc
    ///(7) 0x97d1a8af2ff0ce4ac6de4ac1b32c8195bf4dcf28
    ///(8) 0x705539079297310dd15ddfb970338b9c9e2a4111
    ///(9) 0x0ec6a5a5d3def861c24eceb61274b3099bbcee9d

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    before(async () => {
        supplyChain = await SupplyChain.deployed()
    });

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {        
        await supplyChain.addFarmer(originFarmerID)
        
        const txn = await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: originFarmerID }
        )

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        
        // Watch the emitted event Harvested()
        truffleAssert.eventEmitted(txn, 'Harvested', (event) => {
            return true;
        }, 'Invalid event emitted')
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
                
        // Watch the emitted event Processed()
        // Mark an item as Processed by calling function processtItem()
        truffleAssert.eventEmitted(await supplyChain.processItem(upc, { from: originFarmerID }), 'Processed', (event) => {
            return true;
        }, 'Error: Invalid event emitted')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        
        // Declare and Initialize a variable for event
        // Watch the emitted event Packed()
        // Mark an item as Packed by calling function packItem()

        truffleAssert.eventEmitted(await supplyChain.packItem(upc, { from: originFarmerID }), 'Packed', (event) => {
            return true;
        }, 'Error: Invalid event emitted')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        
        // Declare and Initialize a variable for event
        // Watch the emitted event ForSale()
        // Mark an item as ForSale by calling function sellItem()
        truffleAssert.eventEmitted(await supplyChain.sellItem(upc, productPrice, { from: originFarmerID }), 'ForSale', (event) => {
            return true;
        }, 'Error: nvalid event emitted')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Price does not match')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')

    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        await supplyChain.addDistributor(distributorID)

        // Declare and Initialize a variable for event
        // Watch the emitted event Sold()
        // Mark an item as Sold by calling function buyItem()
      
        truffleAssert.eventEmitted(await supplyChain.buyItem(upc, { from: distributorID, value: productPrice}), 'Sold', (event) => {
            return true;
        }, 'Error: Invalid event emitted')
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        console.log(resultBufferOne)
        assert.equal(resultBufferOne[2], distributorID, 'Error: Selling error')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Selling error')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        
        // Declare and Initialize a variable for event
        // Watch the emitted event Shipped()
        // Mark an item as Shipped by calling function shipItem()
        truffleAssert.eventEmitted(await supplyChain.shipItem(upc, { from: distributorID}), 'Shipped', (event) => {
            return true;
        }, 'Errro: Invalid event emitted')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        await supplyChain.addRetailer(retailerID)
        // Declare and Initialize a variable for event      
        // Watch the emitted event Received()
        // Mark an item as Received by calling function receiveItem()
        truffleAssert.eventEmitted(await supplyChain.receiveItem(upc, { from: retailerID}), 'Received', (event) => {
            return true;
        }, 'Errro: Invalid event emitted')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], retailerID, 'Error: Receiving issue')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Receiving issue')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        await supplyChain.addConsumer(consumerID)

        // Declare and Initialize a variable for event
        // Watch the emitted event Purchased()
        // Mark an item as Purchased by calling function purchaseItem()
        truffleAssert.eventEmitted(await supplyChain.purchaseItem(upc, { from: consumerID}), 'Purchased', (event) => {
            return true;
        }, 'Errro: Invalid event emitted')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Purchasing error')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Purchasing error')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID');
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes');
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice');
        assert.equal(resultBufferTwo[5], 7, 'Error: Missing or Invalid Item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID');
        
    })

});

